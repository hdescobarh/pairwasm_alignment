var searchIndex = JSON.parse('{\
"pairwasm_alignment":{"doc":"","t":"NNDENAALLLLFLLLLALLLLMAMLALLLLLLLAIENNFLLLALAKLLLADLLLLLMLLLMMMLLLLDLLLMLLMMLLLMMMLLLLLIDNENNNNNNNLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLNENNNNENNNINNNNNNNNDNNNDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLMMLLKLMLLLLLLLLLLLLLLRRRRNENDDNLLLLLLMMLLLLLLLLLLLLLLLLLMLLMLLMLLLLLLLLLLDGIIIGAALLKLKAKLKLKLKLLLKMKMLLLFFFFEDNDNDNLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLDNDNRRRRELLLLLLFFFLLMMLLLLLLLLLLLLMFLLLLLLLLLIF","n":["AlignerNotExist","GapModelNotExist","InputError","InputErrorKind","ScoringMatrixNotExist","aligner","bioseq","borrow","borrow","borrow_mut","borrow_mut","do_protein_alignment","eq","fmt","fmt","fmt","formatter","from","from","into","into","kind","matrix","message","new","scoring_schema","to_string","try_from","try_from","try_into","try_into","type_id","type_id","utils","Aligner","AlignerKind","NeedlemanWunsch","SmithWaterman","aminoacid_align_builder","borrow","borrow_mut","from","global_alignment","into","local_alignment","run","try_from","try_into","type_id","utils","NeedlemanWunsch","borrow","borrow_mut","from","initialize","into","matrix","new","run","run","scoring_schema","sequence_left","sequence_top","solve_subproblems","try_from","try_into","type_id","SmithWaterman","borrow","borrow_mut","from","global_maximum","initialize","into","matrix","maximum_indices","new","run","run","scoring_schema","sequence_left","sequence_top","solve_subproblems","try_from","try_into","type_id","update_maximum_entries","AffineTransversalOrder","AlignmentSequence","All","BackTrack","D","DL","DT","Empty","L","T","TL","backtracking","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decompose","diagonal_score","fmt","from","from","into","into","left_score","make_backtrack","make_backtrack_similarity","new","nonempty_from_discriminant","pairs","read","to_owned","to_string","top_score","try_from","try_from","try_into","try_into","type_id","type_id","A","Aac","C","D","E","EmptyString","ErrorKind","F","G","H","HasSequence","I","InvalidCode","K","L","M","N","NonAscii","P","Protein","Q","R","S","SeqError","T","V","W","Y","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char_mapping","clone","clone_into","eq","eq","fmt","fmt","fmt","from","from","from","from","from_char","into","into","into","into","kind","message","new","new","seq","seq","sequence","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","GAP_STR","MATCH_STR","MISMATCH_STR","SPACE_STR","EmptyAtIndex","ErrorKind","Filled","MatError","Matrix","OutOfDimension","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cols","container","dim","empty","eq","fmt","fmt","fmt","from","from","from","full","get","get_mut","index","index_mut","into","into","into","kind","last_entry_indices","map_2dim_to_1dim_index","message","new","push","rows","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AaScoringSchema","CostType","GapPenalty","ScoringSchema","Similarity","SimilarityType","aminoacid_data","aminoacid_schema","borrow","borrow_mut","extend","from","function","gap_penalty","get_extend","get_extend","get_function","get_function","get_open","get_open","get_score","get_score","into","new","open","penalty","read_score","substitution","try_from","try_into","type_id","map_aminoacid_to_index","read_blosum45","read_blosum62","read_pam160","AaScoringKind","Blosum45","Blosum45","Blosum62","Blosum62","Pam160","Pam160","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","read_score","read_score","read_score","similarity_builder","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Affine","Affine","Linear","Linear","MAX_EXTEND_COST","MAX_OPEN_COST","MIN_EXTEND_COST","MIN_OPEN_COST","PenaltyKind","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_extend_cost","check_length","check_open_cost","extend","extend","extend_cost","extend_cost","from","from","from","function","function","into","into","into","new","new","open","open","open_cost","penalty_builder","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AlignmentUnit","set_panic_hook"],"q":[[0,"pairwasm_alignment"],[34,"pairwasm_alignment::aligner"],[50,"pairwasm_alignment::aligner::global_alignment"],[67,"pairwasm_alignment::aligner::local_alignment"],[87,"pairwasm_alignment::aligner::utils"],[128,"pairwasm_alignment::bioseq"],[202,"pairwasm_alignment::formatter"],[206,"pairwasm_alignment::matrix"],[254,"pairwasm_alignment::scoring_schema"],[285,"pairwasm_alignment::scoring_schema::aminoacid_data"],[289,"pairwasm_alignment::scoring_schema::aminoacid_schema"],[328,"pairwasm_alignment::scoring_schema::gap_penalty"],[373,"pairwasm_alignment::utils"],[375,"alloc::string"],[376,"wasm_bindgen"],[377,"core::result"],[378,"core::fmt"],[379,"core::fmt"],[380,"alloc::boxed"],[381,"alloc::vec"],[382,"core::marker"],[383,"core::cmp"],[384,"core::option"],[385,"core::clone"]],"d":["","","Error type for input operations.","A list specifying general error categories of InputError.","","Alignment algorithms","Data structures representing biological sequences and …","","","","","","","","","","Deals with the output format","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Matricial data structures.","","","Scoring systems for sequence alignment.","","","","","","","","","Flag for alignment algorithm implementations","","","","Aligner constructor","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Algorithms for local alignment","","","","","common data structures and functions used for multiple …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Smith Waterman original algorithm. Returns the longest and …","","","Returns the argument unchanged.","The highest found score","","Calls <code>U::from(self)</code>.","","Indices whose score is the global maximum","","","","","","","","","","","","","Represents a single alignment","All (7): top, left and top-left.","Represent values for backtracking","Top-left (2): Match/Mismatch.","Top-left and left (6).","Top-left and top (3).","Empty (0): used for initialize collections.","Left (4): Gap at left sequence.","Top (1): Gap at top sequence.","Top and left (5).","from an entry matrix cell tracks all the paths","","","","","","","Separates the BackTrack from its associated value. If …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","generate the back track direction from the scores","generate the back track direction from the scores …","","Create a BackTrack from its discriminant value","","","","","","","","","","","","","IUPAC Amino acid codes. Represents the basic 20 amino …","","","","","A list specifying general error categories of SeqError.","","","","Trait that allows to biological sequences to expose their …","","","","","","","","","Representation of a protein.","","","","Error type for operations related to biological sequences …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a Aac (amino acid code) from a single character …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a Protein from a string. The function is …","","returns the protein or nucleic acid sequence.","","Encodes the protein primary structure.","","","","","","","","","","","","","","","","","","","","A list specifying general categories of MatErr.","","Error type for matricial operations.","Representation of a Matrix (aᵢⱼ), 0 ≤ i &lt; rows , 0 …","","","","","","","","number of columns.","matrix’s elements collection.","Returns the Matrix dimension","Creates an empty matrix of dimension rows * cols. Be aware …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a matrix of dimension rows * cols filled with a …","Returns a reference to the matrix i,j entry. If the entry …","Returns a mutable reference to the matrix i,j entry. If …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the last non-empty matrix entry indices (row, col).","","","","Appends an element to the end of the matrix if there is …","number of rows.","","","","","","","","","","","Amino acid sequence scoring schema","","Scoring schema’s gap penalty component","Scoring schema getters","Scoring schema’s similarity measure component","","Data structures storing amino acid substitution matrices","Amino acid scoring schemas","","","Get the extend gap parameter.","Returns the argument unchanged.","The gap penalty is a map (length) ↦ ℝ.","Gap penalty schemas. A gap is a maximal space chain, its …","","","","","","","","","Calls <code>U::from(self)</code>.","","Get the open gap parameter. Be aware that under some gap …","","","","","","","","Get BLOSUM 45 scores","Get BLOSUM 62 scores","Get PAM 160 scores","Represents available Amino acid scoring matrices","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Similarity schema constructor","","","","","","","","","","","","","Implements affine gap model. f(length) = open_cost + …","The penalty function is defined as 𝙛(𝘬) = 𝙒ₒ + …","Implements linear gap model. f(length) = extend_cost * …","The penalty function is defined as 𝙛(𝘬) = 𝘬 ⋅ …","","","","","Represents the available Gap penalty models","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Penalty constructor","","","","","","","","","","Flag to denote the minimal units of a sequence.",""],"i":[7,7,0,0,7,0,0,9,7,9,7,0,7,9,9,7,0,9,7,9,7,9,0,9,9,0,9,9,7,9,7,9,7,0,0,0,13,13,0,13,13,13,0,13,0,16,13,13,13,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,27,0,27,27,27,27,27,27,27,27,20,27,20,27,27,27,27,50,20,20,27,20,27,50,27,27,20,27,20,20,27,20,50,20,27,20,27,20,27,18,0,18,18,18,36,0,18,18,18,0,18,36,18,18,18,18,36,18,0,18,18,18,0,18,18,18,18,37,18,36,35,37,18,36,35,18,18,18,18,36,36,35,35,37,18,36,35,18,37,18,36,35,35,35,37,35,19,37,37,18,35,37,18,36,35,37,18,36,35,37,18,36,35,0,0,0,0,39,0,39,0,0,39,28,40,39,28,40,39,28,28,28,28,39,40,40,39,28,40,39,28,28,28,28,28,28,40,39,40,28,28,40,40,28,28,40,28,40,39,28,40,39,28,40,39,0,0,0,0,0,0,0,0,41,41,49,41,49,0,30,41,30,41,30,41,30,41,41,41,49,41,46,41,41,41,41,0,0,0,0,0,0,14,0,14,0,14,14,43,44,45,14,43,44,45,14,43,44,45,14,43,44,45,43,44,45,0,14,43,44,45,14,43,44,45,14,43,44,45,0,15,0,15,0,0,0,0,0,15,47,48,15,47,48,0,0,0,47,48,47,48,15,47,48,47,48,15,47,48,47,48,47,48,47,0,15,47,48,15,47,48,15,47,48,0,0],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1,2,2,3,3],[[6,[4,5]]]],[[7,7],8],[[9,10],11],[[9,10],11],[[7,10],11],0,[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[7,9],0,[-1,4,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,[[13,-1,-2,14,15],[[17,[16]]],[[19,[18]]],[[19,[18]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],0,[-1,-2,[],[]],0,[-1,[[21,[[20,[-2]]]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[[22,[-1]]],23,24],[-1,-2,[],[]],0,[[-1,-2,14,15],[[22,[18]]],[[19,[18]]],[[19,[18]]]],[[[22,[-1]]],[[21,[[20,[-1]]]]],24],[[[22,[-1]]],[[21,[[20,[-1]]]]],24],0,0,0,[[[22,[-1]]],23,24],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],0,[[[25,[-1]]],23,24],[-1,-2,[],[]],0,0,[[-1,-2,14,15],[[25,[18]]],[[19,[18]]],[[19,[18]]]],[[[25,[-1]]],[[21,[[20,[-1]]]]],24],[[[25,[-1]]],[[21,[[20,[-1]]]]],24],0,0,0,[[[25,[-1]]],23,24],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],[[[25,[-1]],2,26,26],23,24],0,0,0,0,0,0,0,0,0,0,0,[[[28,[27]],26,26,2],[[21,[[21,[[29,[26]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[[-1,-2],23,[],[]],[27,[[23,[3,2]]]],[[-2,-3,[17,[30]],[28,[27]],26,26],2,[],[[19,[-1]],31],[[19,[-1]],31]],[[[20,[-1]],10],11,[24,32]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[30]],[28,[27]],26,26],2],[[2,2,2],[[23,[27,2]]]],[[2,2,2],[[23,[27,2]]]],[[[21,[[29,[26]]]],-2,-3],[[20,[-1]]],[24,24],[[19,[-1]],31],[[19,[-1]],31]],[[3,2],27],0,[[[20,[-1]]],[[21,[[29,[[33,[-1]]]]]]],24],[-1,-2,[],[]],[-1,4,[]],[[[17,[30]],[28,[27]],26,26],2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,[[6,[18,35]]]],[18,18],[[-1,-2],23,[],[]],[[18,18],8],[[36,36],8],[[36,10],11],[[35,10],11],[[35,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,[[6,[18,35]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[1,[[6,[37,35]]]],[36,35],[-1,[[21,[-2]]],[],[]],[37,[[21,[18]]]],0,[-1,-2,[],[]],[-1,4,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[28,[-1]]],[[29,[26]]],[]],[[26,26],[[28,[-1]]],38],[[39,39],8],[[40,10],11],[[40,10],11],[[39,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,26,26],[[28,[-1]]],38],[[[28,[-1]],26,26],[[6,[-1,40]]],38],[[[28,[-1]],26,26],[[6,[-1,40]]],38],[[[28,[-1]],[29,[26]]],[],38],[[[28,[-1]],[29,[26]]],[],38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[28,[-1]]],[[33,[[23,[26,26]]]]],38],[[[28,[-1]],26,26],[[6,[26,40]]],38],0,[39,40],[[[28,[-1]],-1],[[6,[23,40]]],38],0,[-1,4,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[-1,-1,[]],[[-1,26],2,[]],0,[-1,2,[]],[41,2],[[-1,26],2,[]],[[41,26],2],[-1,2,[]],[41,2],[[-1,-2,-2],42,[],[]],[[41,18,18],42],[-1,-2,[],[]],[[14,15],41],[-1,2,[]],0,[[-1,-2,-2],42,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],[[18,18],3],[[18,18],42],[[18,18],42],[[18,18],42],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[43,18,18],42],[[44,18,18],42],[[45,18,18],42],[14,[[17,[46]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,23],[26,23],[2,23],[47,2],[48,2],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[47,26],2],[[48,26],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[2,2],47],[2,48],[47,2],[48,2],0,[15,[[17,[49]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[[],23]],"c":[],"p":[[15,"str"],[15,"f32"],[15,"u8"],[3,"String",375],[3,"JsError",376],[4,"Result",377],[4,"InputErrorKind",0],[15,"bool"],[3,"InputError",0],[3,"Formatter",378],[6,"Result",378],[3,"TypeId",379],[4,"AlignerKind",34],[4,"AaScoringKind",289],[4,"PenaltyKind",328],[8,"Aligner",34],[3,"Box",380],[4,"Aac",128],[8,"HasSequence",128],[3,"AlignmentSequence",87],[3,"Vec",381],[3,"NeedlemanWunsch",50],[15,"tuple"],[8,"AlignmentUnit",373],[3,"SmithWaterman",67],[15,"usize"],[4,"BackTrack",87],[3,"Matrix",206],[15,"array"],[8,"ScoringSchema",254],[8,"Sized",382],[8,"PartialEq",383],[4,"Option",384],[15,"char"],[3,"SeqError",128],[4,"ErrorKind",128],[3,"Protein",128],[8,"Clone",385],[4,"ErrorKind",206],[3,"MatError",206],[3,"AaScoringSchema",254],[15,"i8"],[3,"Blosum45",289],[3,"Blosum62",289],[3,"Pam160",289],[8,"Similarity",254],[3,"Affine",328],[3,"Linear",328],[8,"GapPenalty",254],[8,"AffineTransversalOrder",87]],"b":[[13,"impl-Debug-for-InputError"],[14,"impl-Display-for-InputError"],[58,"impl-NeedlemanWunsch%3CA%3E"],[59,"impl-Aligner%3CA%3E-for-NeedlemanWunsch%3CA%3E"],[77,"impl-Aligner%3CA%3E-for-SmithWaterman%3CA%3E"],[78,"impl-SmithWaterman%3CA%3E"],[170,"impl-Debug-for-SeqError"],[171,"impl-Display-for-SeqError"],[223,"impl-Debug-for-MatError"],[224,"impl-Display-for-MatError"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
